/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 313.0, "minX": 0.0, "maxY": 5485.0, "series": [{"data": [[0.0, 313.0], [0.1, 313.0], [0.2, 313.0], [0.3, 318.0], [0.4, 318.0], [0.5, 367.0], [0.6, 367.0], [0.7, 367.0], [0.8, 396.0], [0.9, 396.0], [1.0, 433.0], [1.1, 433.0], [1.2, 433.0], [1.3, 440.0], [1.4, 440.0], [1.5, 447.0], [1.6, 447.0], [1.7, 447.0], [1.8, 456.0], [1.9, 456.0], [2.0, 465.0], [2.1, 465.0], [2.2, 465.0], [2.3, 467.0], [2.4, 467.0], [2.5, 468.0], [2.6, 468.0], [2.7, 468.0], [2.8, 472.0], [2.9, 472.0], [3.0, 477.0], [3.1, 477.0], [3.2, 477.0], [3.3, 480.0], [3.4, 480.0], [3.5, 495.0], [3.6, 495.0], [3.7, 495.0], [3.8, 516.0], [3.9, 516.0], [4.0, 534.0], [4.1, 534.0], [4.2, 534.0], [4.3, 542.0], [4.4, 542.0], [4.5, 561.0], [4.6, 561.0], [4.7, 561.0], [4.8, 582.0], [4.9, 582.0], [5.0, 593.0], [5.1, 593.0], [5.2, 593.0], [5.3, 593.0], [5.4, 593.0], [5.5, 595.0], [5.6, 595.0], [5.7, 595.0], [5.8, 597.0], [5.9, 597.0], [6.0, 597.0], [6.1, 597.0], [6.2, 597.0], [6.3, 598.0], [6.4, 598.0], [6.5, 598.0], [6.6, 598.0], [6.7, 598.0], [6.8, 599.0], [6.9, 599.0], [7.0, 599.0], [7.1, 599.0], [7.2, 599.0], [7.3, 600.0], [7.4, 600.0], [7.5, 601.0], [7.6, 601.0], [7.7, 601.0], [7.8, 602.0], [7.9, 602.0], [8.0, 603.0], [8.1, 603.0], [8.2, 603.0], [8.3, 604.0], [8.4, 604.0], [8.5, 608.0], [8.6, 608.0], [8.7, 608.0], [8.8, 609.0], [8.9, 609.0], [9.0, 610.0], [9.1, 610.0], [9.2, 610.0], [9.3, 611.0], [9.4, 611.0], [9.5, 611.0], [9.6, 611.0], [9.7, 611.0], [9.8, 611.0], [9.9, 611.0], [10.0, 612.0], [10.1, 612.0], [10.2, 612.0], [10.3, 612.0], [10.4, 612.0], [10.5, 612.0], [10.6, 612.0], [10.7, 612.0], [10.8, 612.0], [10.9, 612.0], [11.0, 614.0], [11.1, 614.0], [11.2, 614.0], [11.3, 614.0], [11.4, 614.0], [11.5, 615.0], [11.6, 615.0], [11.7, 615.0], [11.8, 618.0], [11.9, 618.0], [12.0, 618.0], [12.1, 618.0], [12.2, 618.0], [12.3, 618.0], [12.4, 618.0], [12.5, 618.0], [12.6, 618.0], [12.7, 618.0], [12.8, 619.0], [12.9, 619.0], [13.0, 620.0], [13.1, 620.0], [13.2, 620.0], [13.3, 622.0], [13.4, 622.0], [13.5, 622.0], [13.6, 622.0], [13.7, 622.0], [13.8, 622.0], [13.9, 622.0], [14.0, 625.0], [14.1, 625.0], [14.2, 625.0], [14.3, 628.0], [14.4, 628.0], [14.5, 629.0], [14.6, 629.0], [14.7, 629.0], [14.8, 630.0], [14.9, 630.0], [15.0, 630.0], [15.1, 630.0], [15.2, 630.0], [15.3, 630.0], [15.4, 630.0], [15.5, 630.0], [15.6, 630.0], [15.7, 630.0], [15.8, 630.0], [15.9, 630.0], [16.0, 630.0], [16.1, 630.0], [16.2, 630.0], [16.3, 631.0], [16.4, 631.0], [16.5, 631.0], [16.6, 631.0], [16.7, 631.0], [16.8, 632.0], [16.9, 632.0], [17.0, 632.0], [17.1, 632.0], [17.2, 632.0], [17.3, 633.0], [17.4, 633.0], [17.5, 633.0], [17.6, 633.0], [17.7, 633.0], [17.8, 633.0], [17.9, 633.0], [18.0, 634.0], [18.1, 634.0], [18.2, 634.0], [18.3, 634.0], [18.4, 634.0], [18.5, 634.0], [18.6, 634.0], [18.7, 634.0], [18.8, 635.0], [18.9, 635.0], [19.0, 635.0], [19.1, 635.0], [19.2, 635.0], [19.3, 635.0], [19.4, 635.0], [19.5, 635.0], [19.6, 635.0], [19.7, 635.0], [19.8, 635.0], [19.9, 635.0], [20.0, 636.0], [20.1, 636.0], [20.2, 636.0], [20.3, 637.0], [20.4, 637.0], [20.5, 637.0], [20.6, 637.0], [20.7, 637.0], [20.8, 640.0], [20.9, 640.0], [21.0, 642.0], [21.1, 642.0], [21.2, 642.0], [21.3, 642.0], [21.4, 642.0], [21.5, 645.0], [21.6, 645.0], [21.7, 645.0], [21.8, 646.0], [21.9, 646.0], [22.0, 647.0], [22.1, 647.0], [22.2, 647.0], [22.3, 647.0], [22.4, 647.0], [22.5, 648.0], [22.6, 648.0], [22.7, 648.0], [22.8, 648.0], [22.9, 648.0], [23.0, 650.0], [23.1, 650.0], [23.2, 650.0], [23.3, 652.0], [23.4, 652.0], [23.5, 652.0], [23.6, 652.0], [23.7, 652.0], [23.8, 660.0], [23.9, 660.0], [24.0, 660.0], [24.1, 660.0], [24.2, 660.0], [24.3, 661.0], [24.4, 661.0], [24.5, 664.0], [24.6, 664.0], [24.7, 664.0], [24.8, 665.0], [24.9, 665.0], [25.0, 666.0], [25.1, 666.0], [25.2, 666.0], [25.3, 667.0], [25.4, 667.0], [25.5, 667.0], [25.6, 667.0], [25.7, 667.0], [25.8, 669.0], [25.9, 669.0], [26.0, 670.0], [26.1, 670.0], [26.2, 670.0], [26.3, 670.0], [26.4, 670.0], [26.5, 673.0], [26.6, 673.0], [26.7, 673.0], [26.8, 675.0], [26.9, 675.0], [27.0, 677.0], [27.1, 677.0], [27.2, 677.0], [27.3, 680.0], [27.4, 680.0], [27.5, 683.0], [27.6, 683.0], [27.7, 683.0], [27.8, 684.0], [27.9, 684.0], [28.0, 685.0], [28.1, 685.0], [28.2, 685.0], [28.3, 686.0], [28.4, 686.0], [28.5, 690.0], [28.6, 690.0], [28.7, 690.0], [28.8, 701.0], [28.9, 701.0], [29.0, 706.0], [29.1, 706.0], [29.2, 706.0], [29.3, 717.0], [29.4, 717.0], [29.5, 722.0], [29.6, 722.0], [29.7, 722.0], [29.8, 724.0], [29.9, 724.0], [30.0, 725.0], [30.1, 725.0], [30.2, 725.0], [30.3, 725.0], [30.4, 725.0], [30.5, 744.0], [30.6, 744.0], [30.7, 744.0], [30.8, 746.0], [30.9, 746.0], [31.0, 746.0], [31.1, 746.0], [31.2, 746.0], [31.3, 746.0], [31.4, 746.0], [31.5, 752.0], [31.6, 752.0], [31.7, 752.0], [31.8, 766.0], [31.9, 766.0], [32.0, 775.0], [32.1, 775.0], [32.2, 775.0], [32.3, 778.0], [32.4, 778.0], [32.5, 784.0], [32.6, 784.0], [32.7, 784.0], [32.8, 788.0], [32.9, 788.0], [33.0, 788.0], [33.1, 788.0], [33.2, 788.0], [33.3, 792.0], [33.4, 792.0], [33.5, 805.0], [33.6, 805.0], [33.7, 805.0], [33.8, 821.0], [33.9, 821.0], [34.0, 830.0], [34.1, 830.0], [34.2, 830.0], [34.3, 833.0], [34.4, 833.0], [34.5, 833.0], [34.6, 833.0], [34.7, 833.0], [34.8, 837.0], [34.9, 837.0], [35.0, 837.0], [35.1, 837.0], [35.2, 837.0], [35.3, 838.0], [35.4, 838.0], [35.5, 839.0], [35.6, 839.0], [35.7, 839.0], [35.8, 839.0], [35.9, 839.0], [36.0, 845.0], [36.1, 845.0], [36.2, 845.0], [36.3, 849.0], [36.4, 849.0], [36.5, 853.0], [36.6, 853.0], [36.7, 853.0], [36.8, 863.0], [36.9, 863.0], [37.0, 869.0], [37.1, 869.0], [37.2, 869.0], [37.3, 871.0], [37.4, 871.0], [37.5, 875.0], [37.6, 875.0], [37.7, 875.0], [37.8, 876.0], [37.9, 876.0], [38.0, 878.0], [38.1, 878.0], [38.2, 878.0], [38.3, 882.0], [38.4, 882.0], [38.5, 883.0], [38.6, 883.0], [38.7, 883.0], [38.8, 883.0], [38.9, 883.0], [39.0, 885.0], [39.1, 885.0], [39.2, 885.0], [39.3, 886.0], [39.4, 886.0], [39.5, 887.0], [39.6, 887.0], [39.7, 887.0], [39.8, 889.0], [39.9, 889.0], [40.0, 889.0], [40.1, 889.0], [40.2, 889.0], [40.3, 889.0], [40.4, 889.0], [40.5, 892.0], [40.6, 892.0], [40.7, 892.0], [40.8, 893.0], [40.9, 893.0], [41.0, 899.0], [41.1, 899.0], [41.2, 899.0], [41.3, 900.0], [41.4, 900.0], [41.5, 901.0], [41.6, 901.0], [41.7, 901.0], [41.8, 902.0], [41.9, 902.0], [42.0, 906.0], [42.1, 906.0], [42.2, 906.0], [42.3, 908.0], [42.4, 908.0], [42.5, 911.0], [42.6, 911.0], [42.7, 911.0], [42.8, 911.0], [42.9, 911.0], [43.0, 913.0], [43.1, 913.0], [43.2, 913.0], [43.3, 917.0], [43.4, 917.0], [43.5, 917.0], [43.6, 917.0], [43.7, 917.0], [43.8, 918.0], [43.9, 918.0], [44.0, 918.0], [44.1, 918.0], [44.2, 918.0], [44.3, 919.0], [44.4, 919.0], [44.5, 919.0], [44.6, 919.0], [44.7, 919.0], [44.8, 920.0], [44.9, 920.0], [45.0, 921.0], [45.1, 921.0], [45.2, 921.0], [45.3, 921.0], [45.4, 921.0], [45.5, 923.0], [45.6, 923.0], [45.7, 923.0], [45.8, 925.0], [45.9, 925.0], [46.0, 925.0], [46.1, 925.0], [46.2, 925.0], [46.3, 925.0], [46.4, 925.0], [46.5, 926.0], [46.6, 926.0], [46.7, 926.0], [46.8, 928.0], [46.9, 928.0], [47.0, 929.0], [47.1, 929.0], [47.2, 929.0], [47.3, 929.0], [47.4, 929.0], [47.5, 932.0], [47.6, 932.0], [47.7, 932.0], [47.8, 933.0], [47.9, 933.0], [48.0, 933.0], [48.1, 933.0], [48.2, 933.0], [48.3, 935.0], [48.4, 935.0], [48.5, 936.0], [48.6, 936.0], [48.7, 936.0], [48.8, 936.0], [48.9, 936.0], [49.0, 936.0], [49.1, 936.0], [49.2, 936.0], [49.3, 937.0], [49.4, 937.0], [49.5, 938.0], [49.6, 938.0], [49.7, 938.0], [49.8, 938.0], [49.9, 938.0], [50.0, 941.0], [50.1, 941.0], [50.2, 941.0], [50.3, 943.0], [50.4, 943.0], [50.5, 944.0], [50.6, 944.0], [50.7, 944.0], [50.8, 946.0], [50.9, 946.0], [51.0, 946.0], [51.1, 946.0], [51.2, 946.0], [51.3, 949.0], [51.4, 949.0], [51.5, 949.0], [51.6, 949.0], [51.7, 949.0], [51.8, 957.0], [51.9, 957.0], [52.0, 958.0], [52.1, 958.0], [52.2, 958.0], [52.3, 961.0], [52.4, 961.0], [52.5, 963.0], [52.6, 963.0], [52.7, 963.0], [52.8, 965.0], [52.9, 965.0], [53.0, 967.0], [53.1, 967.0], [53.2, 967.0], [53.3, 970.0], [53.4, 970.0], [53.5, 971.0], [53.6, 971.0], [53.7, 971.0], [53.8, 971.0], [53.9, 971.0], [54.0, 973.0], [54.1, 973.0], [54.2, 973.0], [54.3, 974.0], [54.4, 974.0], [54.5, 978.0], [54.6, 978.0], [54.7, 978.0], [54.8, 980.0], [54.9, 980.0], [55.0, 981.0], [55.1, 981.0], [55.2, 981.0], [55.3, 982.0], [55.4, 982.0], [55.5, 985.0], [55.6, 985.0], [55.7, 985.0], [55.8, 990.0], [55.9, 990.0], [56.0, 991.0], [56.1, 991.0], [56.2, 991.0], [56.3, 1000.0], [56.4, 1000.0], [56.5, 1003.0], [56.6, 1003.0], [56.7, 1003.0], [56.8, 1009.0], [56.9, 1009.0], [57.0, 1011.0], [57.1, 1011.0], [57.2, 1011.0], [57.3, 1014.0], [57.4, 1014.0], [57.5, 1015.0], [57.6, 1015.0], [57.7, 1015.0], [57.8, 1020.0], [57.9, 1020.0], [58.0, 1028.0], [58.1, 1028.0], [58.2, 1028.0], [58.3, 1032.0], [58.4, 1032.0], [58.5, 1057.0], [58.6, 1057.0], [58.7, 1057.0], [58.8, 1060.0], [58.9, 1060.0], [59.0, 1061.0], [59.1, 1061.0], [59.2, 1061.0], [59.3, 1064.0], [59.4, 1064.0], [59.5, 1077.0], [59.6, 1077.0], [59.7, 1077.0], [59.8, 1086.0], [59.9, 1086.0], [60.0, 1088.0], [60.1, 1088.0], [60.2, 1088.0], [60.3, 1089.0], [60.4, 1089.0], [60.5, 1092.0], [60.6, 1092.0], [60.7, 1092.0], [60.8, 1093.0], [60.9, 1093.0], [61.0, 1095.0], [61.1, 1095.0], [61.2, 1095.0], [61.3, 1096.0], [61.4, 1096.0], [61.5, 1097.0], [61.6, 1097.0], [61.7, 1097.0], [61.8, 1101.0], [61.9, 1101.0], [62.0, 1105.0], [62.1, 1105.0], [62.2, 1105.0], [62.3, 1107.0], [62.4, 1107.0], [62.5, 1118.0], [62.6, 1118.0], [62.7, 1118.0], [62.8, 1120.0], [62.9, 1120.0], [63.0, 1121.0], [63.1, 1121.0], [63.2, 1121.0], [63.3, 1134.0], [63.4, 1134.0], [63.5, 1137.0], [63.6, 1137.0], [63.7, 1137.0], [63.8, 1153.0], [63.9, 1153.0], [64.0, 1158.0], [64.1, 1158.0], [64.2, 1158.0], [64.3, 1161.0], [64.4, 1161.0], [64.5, 1169.0], [64.6, 1169.0], [64.7, 1169.0], [64.8, 1169.0], [64.9, 1169.0], [65.0, 1170.0], [65.1, 1170.0], [65.2, 1170.0], [65.3, 1170.0], [65.4, 1170.0], [65.5, 1177.0], [65.6, 1177.0], [65.7, 1177.0], [65.8, 1180.0], [65.9, 1180.0], [66.0, 1182.0], [66.1, 1182.0], [66.2, 1182.0], [66.3, 1202.0], [66.4, 1202.0], [66.5, 1204.0], [66.6, 1204.0], [66.7, 1204.0], [66.8, 1218.0], [66.9, 1218.0], [67.0, 1224.0], [67.1, 1224.0], [67.2, 1224.0], [67.3, 1224.0], [67.4, 1224.0], [67.5, 1234.0], [67.6, 1234.0], [67.7, 1234.0], [67.8, 1237.0], [67.9, 1237.0], [68.0, 1237.0], [68.1, 1237.0], [68.2, 1237.0], [68.3, 1239.0], [68.4, 1239.0], [68.5, 1253.0], [68.6, 1253.0], [68.7, 1253.0], [68.8, 1266.0], [68.9, 1266.0], [69.0, 1269.0], [69.1, 1269.0], [69.2, 1269.0], [69.3, 1274.0], [69.4, 1274.0], [69.5, 1285.0], [69.6, 1285.0], [69.7, 1285.0], [69.8, 1286.0], [69.9, 1286.0], [70.0, 1296.0], [70.1, 1296.0], [70.2, 1296.0], [70.3, 1297.0], [70.4, 1297.0], [70.5, 1314.0], [70.6, 1314.0], [70.7, 1314.0], [70.8, 1316.0], [70.9, 1316.0], [71.0, 1322.0], [71.1, 1322.0], [71.2, 1322.0], [71.3, 1335.0], [71.4, 1335.0], [71.5, 1337.0], [71.6, 1337.0], [71.7, 1337.0], [71.8, 1337.0], [71.9, 1337.0], [72.0, 1355.0], [72.1, 1355.0], [72.2, 1355.0], [72.3, 1360.0], [72.4, 1360.0], [72.5, 1360.0], [72.6, 1360.0], [72.7, 1360.0], [72.8, 1366.0], [72.9, 1366.0], [73.0, 1373.0], [73.1, 1373.0], [73.2, 1373.0], [73.3, 1387.0], [73.4, 1387.0], [73.5, 1399.0], [73.6, 1399.0], [73.7, 1399.0], [73.8, 1401.0], [73.9, 1401.0], [74.0, 1406.0], [74.1, 1406.0], [74.2, 1406.0], [74.3, 1408.0], [74.4, 1408.0], [74.5, 1436.0], [74.6, 1436.0], [74.7, 1436.0], [74.8, 1441.0], [74.9, 1441.0], [75.0, 1442.0], [75.1, 1442.0], [75.2, 1442.0], [75.3, 1444.0], [75.4, 1444.0], [75.5, 1451.0], [75.6, 1451.0], [75.7, 1451.0], [75.8, 1462.0], [75.9, 1462.0], [76.0, 1484.0], [76.1, 1484.0], [76.2, 1484.0], [76.3, 1489.0], [76.4, 1489.0], [76.5, 1492.0], [76.6, 1492.0], [76.7, 1492.0], [76.8, 1496.0], [76.9, 1496.0], [77.0, 1498.0], [77.1, 1498.0], [77.2, 1498.0], [77.3, 1506.0], [77.4, 1506.0], [77.5, 1506.0], [77.6, 1506.0], [77.7, 1506.0], [77.8, 1512.0], [77.9, 1512.0], [78.0, 1520.0], [78.1, 1520.0], [78.2, 1520.0], [78.3, 1523.0], [78.4, 1523.0], [78.5, 1535.0], [78.6, 1535.0], [78.7, 1535.0], [78.8, 1535.0], [78.9, 1535.0], [79.0, 1538.0], [79.1, 1538.0], [79.2, 1538.0], [79.3, 1540.0], [79.4, 1540.0], [79.5, 1548.0], [79.6, 1548.0], [79.7, 1548.0], [79.8, 1556.0], [79.9, 1556.0], [80.0, 1573.0], [80.1, 1573.0], [80.2, 1573.0], [80.3, 1580.0], [80.4, 1580.0], [80.5, 1616.0], [80.6, 1616.0], [80.7, 1616.0], [80.8, 1629.0], [80.9, 1629.0], [81.0, 1652.0], [81.1, 1652.0], [81.2, 1652.0], [81.3, 1657.0], [81.4, 1657.0], [81.5, 1681.0], [81.6, 1681.0], [81.7, 1681.0], [81.8, 1686.0], [81.9, 1686.0], [82.0, 1694.0], [82.1, 1694.0], [82.2, 1694.0], [82.3, 1728.0], [82.4, 1728.0], [82.5, 1730.0], [82.6, 1730.0], [82.7, 1730.0], [82.8, 1786.0], [82.9, 1786.0], [83.0, 1810.0], [83.1, 1810.0], [83.2, 1810.0], [83.3, 1820.0], [83.4, 1820.0], [83.5, 1846.0], [83.6, 1846.0], [83.7, 1846.0], [83.8, 1848.0], [83.9, 1848.0], [84.0, 1857.0], [84.1, 1857.0], [84.2, 1857.0], [84.3, 1909.0], [84.4, 1909.0], [84.5, 1913.0], [84.6, 1913.0], [84.7, 1913.0], [84.8, 1930.0], [84.9, 1930.0], [85.0, 1944.0], [85.1, 1944.0], [85.2, 1944.0], [85.3, 1948.0], [85.4, 1948.0], [85.5, 1973.0], [85.6, 1973.0], [85.7, 1973.0], [85.8, 1993.0], [85.9, 1993.0], [86.0, 2004.0], [86.1, 2004.0], [86.2, 2004.0], [86.3, 2005.0], [86.4, 2005.0], [86.5, 2033.0], [86.6, 2033.0], [86.7, 2033.0], [86.8, 2061.0], [86.9, 2061.0], [87.0, 2062.0], [87.1, 2062.0], [87.2, 2062.0], [87.3, 2072.0], [87.4, 2072.0], [87.5, 2134.0], [87.6, 2134.0], [87.7, 2134.0], [87.8, 2154.0], [87.9, 2154.0], [88.0, 2155.0], [88.1, 2155.0], [88.2, 2155.0], [88.3, 2174.0], [88.4, 2174.0], [88.5, 2181.0], [88.6, 2181.0], [88.7, 2181.0], [88.8, 2198.0], [88.9, 2198.0], [89.0, 2200.0], [89.1, 2200.0], [89.2, 2200.0], [89.3, 2209.0], [89.4, 2209.0], [89.5, 2252.0], [89.6, 2252.0], [89.7, 2252.0], [89.8, 2252.0], [89.9, 2252.0], [90.0, 2261.0], [90.1, 2261.0], [90.2, 2261.0], [90.3, 2282.0], [90.4, 2282.0], [90.5, 2316.0], [90.6, 2316.0], [90.7, 2316.0], [90.8, 2348.0], [90.9, 2348.0], [91.0, 2382.0], [91.1, 2382.0], [91.2, 2382.0], [91.3, 2390.0], [91.4, 2390.0], [91.5, 2453.0], [91.6, 2453.0], [91.7, 2453.0], [91.8, 2474.0], [91.9, 2474.0], [92.0, 2511.0], [92.1, 2511.0], [92.2, 2511.0], [92.3, 2559.0], [92.4, 2559.0], [92.5, 2592.0], [92.6, 2592.0], [92.7, 2592.0], [92.8, 2602.0], [92.9, 2602.0], [93.0, 2602.0], [93.1, 2602.0], [93.2, 2602.0], [93.3, 2603.0], [93.4, 2603.0], [93.5, 2683.0], [93.6, 2683.0], [93.7, 2683.0], [93.8, 2753.0], [93.9, 2753.0], [94.0, 2811.0], [94.1, 2811.0], [94.2, 2811.0], [94.3, 2846.0], [94.4, 2846.0], [94.5, 2863.0], [94.6, 2863.0], [94.7, 2863.0], [94.8, 2878.0], [94.9, 2878.0], [95.0, 2944.0], [95.1, 2944.0], [95.2, 2944.0], [95.3, 2966.0], [95.4, 2966.0], [95.5, 3036.0], [95.6, 3036.0], [95.7, 3036.0], [95.8, 3086.0], [95.9, 3086.0], [96.0, 3327.0], [96.1, 3327.0], [96.2, 3327.0], [96.3, 3383.0], [96.4, 3383.0], [96.5, 3454.0], [96.6, 3454.0], [96.7, 3454.0], [96.8, 3654.0], [96.9, 3654.0], [97.0, 3781.0], [97.1, 3781.0], [97.2, 3781.0], [97.3, 3847.0], [97.4, 3847.0], [97.5, 3871.0], [97.6, 3871.0], [97.7, 3871.0], [97.8, 4302.0], [97.9, 4302.0], [98.0, 4355.0], [98.1, 4355.0], [98.2, 4355.0], [98.3, 4454.0], [98.4, 4454.0], [98.5, 4557.0], [98.6, 4557.0], [98.7, 4557.0], [98.8, 4632.0], [98.9, 4632.0], [99.0, 4810.0], [99.1, 4810.0], [99.2, 4810.0], [99.3, 4851.0], [99.4, 4851.0], [99.5, 4852.0], [99.6, 4852.0], [99.7, 4852.0], [99.8, 5186.0], [99.9, 5186.0]], "isOverall": false, "label": "Search Pet", "isController": false}, {"data": [[0.0, 1241.0], [0.1, 1241.0], [0.2, 1241.0], [0.3, 1274.0], [0.4, 1274.0], [0.5, 1278.0], [0.6, 1278.0], [0.7, 1278.0], [0.8, 1296.0], [0.9, 1296.0], [1.0, 1312.0], [1.1, 1312.0], [1.2, 1312.0], [1.3, 1313.0], [1.4, 1313.0], [1.5, 1315.0], [1.6, 1315.0], [1.7, 1315.0], [1.8, 1316.0], [1.9, 1316.0], [2.0, 1326.0], [2.1, 1326.0], [2.2, 1326.0], [2.3, 1327.0], [2.4, 1327.0], [2.5, 1328.0], [2.6, 1328.0], [2.7, 1328.0], [2.8, 1328.0], [2.9, 1328.0], [3.0, 1332.0], [3.1, 1332.0], [3.2, 1332.0], [3.3, 1333.0], [3.4, 1333.0], [3.5, 1341.0], [3.6, 1341.0], [3.7, 1341.0], [3.8, 1342.0], [3.9, 1342.0], [4.0, 1345.0], [4.1, 1345.0], [4.2, 1345.0], [4.3, 1347.0], [4.4, 1347.0], [4.5, 1349.0], [4.6, 1349.0], [4.7, 1349.0], [4.8, 1354.0], [4.9, 1354.0], [5.0, 1359.0], [5.1, 1359.0], [5.2, 1359.0], [5.3, 1361.0], [5.4, 1361.0], [5.5, 1361.0], [5.6, 1361.0], [5.7, 1361.0], [5.8, 1363.0], [5.9, 1363.0], [6.0, 1364.0], [6.1, 1364.0], [6.2, 1364.0], [6.3, 1365.0], [6.4, 1365.0], [6.5, 1365.0], [6.6, 1365.0], [6.7, 1365.0], [6.8, 1367.0], [6.9, 1367.0], [7.0, 1369.0], [7.1, 1369.0], [7.2, 1369.0], [7.3, 1372.0], [7.4, 1372.0], [7.5, 1373.0], [7.6, 1373.0], [7.7, 1373.0], [7.8, 1381.0], [7.9, 1381.0], [8.0, 1382.0], [8.1, 1382.0], [8.2, 1382.0], [8.3, 1386.0], [8.4, 1386.0], [8.5, 1386.0], [8.6, 1386.0], [8.7, 1386.0], [8.8, 1389.0], [8.9, 1389.0], [9.0, 1392.0], [9.1, 1392.0], [9.2, 1392.0], [9.3, 1395.0], [9.4, 1395.0], [9.5, 1397.0], [9.6, 1397.0], [9.7, 1397.0], [9.8, 1397.0], [9.9, 1397.0], [10.0, 1399.0], [10.1, 1399.0], [10.2, 1399.0], [10.3, 1400.0], [10.4, 1400.0], [10.5, 1400.0], [10.6, 1400.0], [10.7, 1400.0], [10.8, 1403.0], [10.9, 1403.0], [11.0, 1406.0], [11.1, 1406.0], [11.2, 1406.0], [11.3, 1409.0], [11.4, 1409.0], [11.5, 1410.0], [11.6, 1410.0], [11.7, 1410.0], [11.8, 1410.0], [11.9, 1410.0], [12.0, 1414.0], [12.1, 1414.0], [12.2, 1414.0], [12.3, 1416.0], [12.4, 1416.0], [12.5, 1417.0], [12.6, 1417.0], [12.7, 1417.0], [12.8, 1421.0], [12.9, 1421.0], [13.0, 1424.0], [13.1, 1424.0], [13.2, 1424.0], [13.3, 1435.0], [13.4, 1435.0], [13.5, 1442.0], [13.6, 1442.0], [13.7, 1442.0], [13.8, 1443.0], [13.9, 1443.0], [14.0, 1447.0], [14.1, 1447.0], [14.2, 1447.0], [14.3, 1452.0], [14.4, 1452.0], [14.5, 1453.0], [14.6, 1453.0], [14.7, 1453.0], [14.8, 1455.0], [14.9, 1455.0], [15.0, 1460.0], [15.1, 1460.0], [15.2, 1460.0], [15.3, 1462.0], [15.4, 1462.0], [15.5, 1462.0], [15.6, 1462.0], [15.7, 1462.0], [15.8, 1463.0], [15.9, 1463.0], [16.0, 1463.0], [16.1, 1463.0], [16.2, 1463.0], [16.3, 1464.0], [16.4, 1464.0], [16.5, 1466.0], [16.6, 1466.0], [16.7, 1466.0], [16.8, 1467.0], [16.9, 1467.0], [17.0, 1470.0], [17.1, 1470.0], [17.2, 1470.0], [17.3, 1473.0], [17.4, 1473.0], [17.5, 1477.0], [17.6, 1477.0], [17.7, 1477.0], [17.8, 1477.0], [17.9, 1477.0], [18.0, 1478.0], [18.1, 1478.0], [18.2, 1478.0], [18.3, 1480.0], [18.4, 1480.0], [18.5, 1481.0], [18.6, 1481.0], [18.7, 1481.0], [18.8, 1483.0], [18.9, 1483.0], [19.0, 1485.0], [19.1, 1485.0], [19.2, 1485.0], [19.3, 1485.0], [19.4, 1485.0], [19.5, 1487.0], [19.6, 1487.0], [19.7, 1487.0], [19.8, 1488.0], [19.9, 1488.0], [20.0, 1488.0], [20.1, 1488.0], [20.2, 1488.0], [20.3, 1491.0], [20.4, 1491.0], [20.5, 1492.0], [20.6, 1492.0], [20.7, 1492.0], [20.8, 1494.0], [20.9, 1494.0], [21.0, 1495.0], [21.1, 1495.0], [21.2, 1495.0], [21.3, 1496.0], [21.4, 1496.0], [21.5, 1498.0], [21.6, 1498.0], [21.7, 1498.0], [21.8, 1502.0], [21.9, 1502.0], [22.0, 1502.0], [22.1, 1502.0], [22.2, 1502.0], [22.3, 1503.0], [22.4, 1503.0], [22.5, 1506.0], [22.6, 1506.0], [22.7, 1506.0], [22.8, 1508.0], [22.9, 1508.0], [23.0, 1512.0], [23.1, 1512.0], [23.2, 1512.0], [23.3, 1513.0], [23.4, 1513.0], [23.5, 1513.0], [23.6, 1513.0], [23.7, 1513.0], [23.8, 1518.0], [23.9, 1518.0], [24.0, 1521.0], [24.1, 1521.0], [24.2, 1521.0], [24.3, 1523.0], [24.4, 1523.0], [24.5, 1525.0], [24.6, 1525.0], [24.7, 1525.0], [24.8, 1525.0], [24.9, 1525.0], [25.0, 1526.0], [25.1, 1526.0], [25.2, 1526.0], [25.3, 1526.0], [25.4, 1526.0], [25.5, 1527.0], [25.6, 1527.0], [25.7, 1527.0], [25.8, 1531.0], [25.9, 1531.0], [26.0, 1531.0], [26.1, 1531.0], [26.2, 1531.0], [26.3, 1533.0], [26.4, 1533.0], [26.5, 1536.0], [26.6, 1536.0], [26.7, 1536.0], [26.8, 1537.0], [26.9, 1537.0], [27.0, 1538.0], [27.1, 1538.0], [27.2, 1538.0], [27.3, 1541.0], [27.4, 1541.0], [27.5, 1541.0], [27.6, 1541.0], [27.7, 1541.0], [27.8, 1542.0], [27.9, 1542.0], [28.0, 1542.0], [28.1, 1542.0], [28.2, 1542.0], [28.3, 1543.0], [28.4, 1543.0], [28.5, 1544.0], [28.6, 1544.0], [28.7, 1544.0], [28.8, 1545.0], [28.9, 1545.0], [29.0, 1546.0], [29.1, 1546.0], [29.2, 1546.0], [29.3, 1547.0], [29.4, 1547.0], [29.5, 1547.0], [29.6, 1547.0], [29.7, 1547.0], [29.8, 1551.0], [29.9, 1551.0], [30.0, 1551.0], [30.1, 1551.0], [30.2, 1551.0], [30.3, 1553.0], [30.4, 1553.0], [30.5, 1553.0], [30.6, 1553.0], [30.7, 1553.0], [30.8, 1554.0], [30.9, 1554.0], [31.0, 1554.0], [31.1, 1554.0], [31.2, 1554.0], [31.3, 1554.0], [31.4, 1554.0], [31.5, 1556.0], [31.6, 1556.0], [31.7, 1556.0], [31.8, 1559.0], [31.9, 1559.0], [32.0, 1559.0], [32.1, 1559.0], [32.2, 1559.0], [32.3, 1565.0], [32.4, 1565.0], [32.5, 1567.0], [32.6, 1567.0], [32.7, 1567.0], [32.8, 1575.0], [32.9, 1575.0], [33.0, 1576.0], [33.1, 1576.0], [33.2, 1576.0], [33.3, 1577.0], [33.4, 1577.0], [33.5, 1579.0], [33.6, 1579.0], [33.7, 1579.0], [33.8, 1581.0], [33.9, 1581.0], [34.0, 1583.0], [34.1, 1583.0], [34.2, 1583.0], [34.3, 1584.0], [34.4, 1584.0], [34.5, 1585.0], [34.6, 1585.0], [34.7, 1585.0], [34.8, 1586.0], [34.9, 1586.0], [35.0, 1587.0], [35.1, 1587.0], [35.2, 1587.0], [35.3, 1588.0], [35.4, 1588.0], [35.5, 1589.0], [35.6, 1589.0], [35.7, 1589.0], [35.8, 1590.0], [35.9, 1590.0], [36.0, 1590.0], [36.1, 1590.0], [36.2, 1590.0], [36.3, 1597.0], [36.4, 1597.0], [36.5, 1604.0], [36.6, 1604.0], [36.7, 1604.0], [36.8, 1605.0], [36.9, 1605.0], [37.0, 1608.0], [37.1, 1608.0], [37.2, 1608.0], [37.3, 1610.0], [37.4, 1610.0], [37.5, 1612.0], [37.6, 1612.0], [37.7, 1612.0], [37.8, 1613.0], [37.9, 1613.0], [38.0, 1615.0], [38.1, 1615.0], [38.2, 1615.0], [38.3, 1629.0], [38.4, 1629.0], [38.5, 1631.0], [38.6, 1631.0], [38.7, 1631.0], [38.8, 1632.0], [38.9, 1632.0], [39.0, 1635.0], [39.1, 1635.0], [39.2, 1635.0], [39.3, 1635.0], [39.4, 1635.0], [39.5, 1635.0], [39.6, 1635.0], [39.7, 1635.0], [39.8, 1639.0], [39.9, 1639.0], [40.0, 1640.0], [40.1, 1640.0], [40.2, 1640.0], [40.3, 1642.0], [40.4, 1642.0], [40.5, 1644.0], [40.6, 1644.0], [40.7, 1644.0], [40.8, 1645.0], [40.9, 1645.0], [41.0, 1646.0], [41.1, 1646.0], [41.2, 1646.0], [41.3, 1648.0], [41.4, 1648.0], [41.5, 1655.0], [41.6, 1655.0], [41.7, 1655.0], [41.8, 1656.0], [41.9, 1656.0], [42.0, 1658.0], [42.1, 1658.0], [42.2, 1658.0], [42.3, 1659.0], [42.4, 1659.0], [42.5, 1661.0], [42.6, 1661.0], [42.7, 1661.0], [42.8, 1662.0], [42.9, 1662.0], [43.0, 1662.0], [43.1, 1662.0], [43.2, 1662.0], [43.3, 1664.0], [43.4, 1664.0], [43.5, 1665.0], [43.6, 1665.0], [43.7, 1665.0], [43.8, 1669.0], [43.9, 1669.0], [44.0, 1670.0], [44.1, 1670.0], [44.2, 1670.0], [44.3, 1670.0], [44.4, 1670.0], [44.5, 1670.0], [44.6, 1670.0], [44.7, 1670.0], [44.8, 1671.0], [44.9, 1671.0], [45.0, 1674.0], [45.1, 1674.0], [45.2, 1674.0], [45.3, 1680.0], [45.4, 1680.0], [45.5, 1681.0], [45.6, 1681.0], [45.7, 1681.0], [45.8, 1682.0], [45.9, 1682.0], [46.0, 1683.0], [46.1, 1683.0], [46.2, 1683.0], [46.3, 1683.0], [46.4, 1683.0], [46.5, 1684.0], [46.6, 1684.0], [46.7, 1684.0], [46.8, 1688.0], [46.9, 1688.0], [47.0, 1688.0], [47.1, 1688.0], [47.2, 1688.0], [47.3, 1689.0], [47.4, 1689.0], [47.5, 1689.0], [47.6, 1689.0], [47.7, 1689.0], [47.8, 1691.0], [47.9, 1691.0], [48.0, 1693.0], [48.1, 1693.0], [48.2, 1693.0], [48.3, 1695.0], [48.4, 1695.0], [48.5, 1698.0], [48.6, 1698.0], [48.7, 1698.0], [48.8, 1704.0], [48.9, 1704.0], [49.0, 1706.0], [49.1, 1706.0], [49.2, 1706.0], [49.3, 1710.0], [49.4, 1710.0], [49.5, 1718.0], [49.6, 1718.0], [49.7, 1718.0], [49.8, 1721.0], [49.9, 1721.0], [50.0, 1723.0], [50.1, 1723.0], [50.2, 1723.0], [50.3, 1725.0], [50.4, 1725.0], [50.5, 1725.0], [50.6, 1725.0], [50.7, 1725.0], [50.8, 1726.0], [50.9, 1726.0], [51.0, 1736.0], [51.1, 1736.0], [51.2, 1736.0], [51.3, 1736.0], [51.4, 1736.0], [51.5, 1743.0], [51.6, 1743.0], [51.7, 1743.0], [51.8, 1744.0], [51.9, 1744.0], [52.0, 1744.0], [52.1, 1744.0], [52.2, 1744.0], [52.3, 1746.0], [52.4, 1746.0], [52.5, 1747.0], [52.6, 1747.0], [52.7, 1747.0], [52.8, 1751.0], [52.9, 1751.0], [53.0, 1752.0], [53.1, 1752.0], [53.2, 1752.0], [53.3, 1755.0], [53.4, 1755.0], [53.5, 1757.0], [53.6, 1757.0], [53.7, 1757.0], [53.8, 1757.0], [53.9, 1757.0], [54.0, 1760.0], [54.1, 1760.0], [54.2, 1760.0], [54.3, 1764.0], [54.4, 1764.0], [54.5, 1769.0], [54.6, 1769.0], [54.7, 1769.0], [54.8, 1772.0], [54.9, 1772.0], [55.0, 1778.0], [55.1, 1778.0], [55.2, 1778.0], [55.3, 1781.0], [55.4, 1781.0], [55.5, 1785.0], [55.6, 1785.0], [55.7, 1785.0], [55.8, 1786.0], [55.9, 1786.0], [56.0, 1787.0], [56.1, 1787.0], [56.2, 1787.0], [56.3, 1790.0], [56.4, 1790.0], [56.5, 1794.0], [56.6, 1794.0], [56.7, 1794.0], [56.8, 1798.0], [56.9, 1798.0], [57.0, 1809.0], [57.1, 1809.0], [57.2, 1809.0], [57.3, 1811.0], [57.4, 1811.0], [57.5, 1815.0], [57.6, 1815.0], [57.7, 1815.0], [57.8, 1821.0], [57.9, 1821.0], [58.0, 1821.0], [58.1, 1821.0], [58.2, 1821.0], [58.3, 1821.0], [58.4, 1821.0], [58.5, 1830.0], [58.6, 1830.0], [58.7, 1830.0], [58.8, 1832.0], [58.9, 1832.0], [59.0, 1840.0], [59.1, 1840.0], [59.2, 1840.0], [59.3, 1841.0], [59.4, 1841.0], [59.5, 1845.0], [59.6, 1845.0], [59.7, 1845.0], [59.8, 1848.0], [59.9, 1848.0], [60.0, 1862.0], [60.1, 1862.0], [60.2, 1862.0], [60.3, 1869.0], [60.4, 1869.0], [60.5, 1872.0], [60.6, 1872.0], [60.7, 1872.0], [60.8, 1899.0], [60.9, 1899.0], [61.0, 1901.0], [61.1, 1901.0], [61.2, 1901.0], [61.3, 1925.0], [61.4, 1925.0], [61.5, 1935.0], [61.6, 1935.0], [61.7, 1935.0], [61.8, 1989.0], [61.9, 1989.0], [62.0, 2001.0], [62.1, 2001.0], [62.2, 2001.0], [62.3, 2004.0], [62.4, 2004.0], [62.5, 2011.0], [62.6, 2011.0], [62.7, 2011.0], [62.8, 2015.0], [62.9, 2015.0], [63.0, 2029.0], [63.1, 2029.0], [63.2, 2029.0], [63.3, 2040.0], [63.4, 2040.0], [63.5, 2051.0], [63.6, 2051.0], [63.7, 2051.0], [63.8, 2052.0], [63.9, 2052.0], [64.0, 2062.0], [64.1, 2062.0], [64.2, 2062.0], [64.3, 2092.0], [64.4, 2092.0], [64.5, 2141.0], [64.6, 2141.0], [64.7, 2141.0], [64.8, 2167.0], [64.9, 2167.0], [65.0, 2174.0], [65.1, 2174.0], [65.2, 2174.0], [65.3, 2179.0], [65.4, 2179.0], [65.5, 2225.0], [65.6, 2225.0], [65.7, 2225.0], [65.8, 2256.0], [65.9, 2256.0], [66.0, 2257.0], [66.1, 2257.0], [66.2, 2257.0], [66.3, 2263.0], [66.4, 2263.0], [66.5, 2274.0], [66.6, 2274.0], [66.7, 2274.0], [66.8, 2321.0], [66.9, 2321.0], [67.0, 2322.0], [67.1, 2322.0], [67.2, 2322.0], [67.3, 2326.0], [67.4, 2326.0], [67.5, 2334.0], [67.6, 2334.0], [67.7, 2334.0], [67.8, 2344.0], [67.9, 2344.0], [68.0, 2349.0], [68.1, 2349.0], [68.2, 2349.0], [68.3, 2371.0], [68.4, 2371.0], [68.5, 2378.0], [68.6, 2378.0], [68.7, 2378.0], [68.8, 2384.0], [68.9, 2384.0], [69.0, 2389.0], [69.1, 2389.0], [69.2, 2389.0], [69.3, 2400.0], [69.4, 2400.0], [69.5, 2404.0], [69.6, 2404.0], [69.7, 2404.0], [69.8, 2405.0], [69.9, 2405.0], [70.0, 2406.0], [70.1, 2406.0], [70.2, 2406.0], [70.3, 2411.0], [70.4, 2411.0], [70.5, 2419.0], [70.6, 2419.0], [70.7, 2419.0], [70.8, 2424.0], [70.9, 2424.0], [71.0, 2437.0], [71.1, 2437.0], [71.2, 2437.0], [71.3, 2440.0], [71.4, 2440.0], [71.5, 2440.0], [71.6, 2440.0], [71.7, 2440.0], [71.8, 2442.0], [71.9, 2442.0], [72.0, 2451.0], [72.1, 2451.0], [72.2, 2451.0], [72.3, 2472.0], [72.4, 2472.0], [72.5, 2476.0], [72.6, 2476.0], [72.7, 2476.0], [72.8, 2485.0], [72.9, 2485.0], [73.0, 2488.0], [73.1, 2488.0], [73.2, 2488.0], [73.3, 2492.0], [73.4, 2492.0], [73.5, 2494.0], [73.6, 2494.0], [73.7, 2494.0], [73.8, 2495.0], [73.9, 2495.0], [74.0, 2497.0], [74.1, 2497.0], [74.2, 2497.0], [74.3, 2497.0], [74.4, 2497.0], [74.5, 2503.0], [74.6, 2503.0], [74.7, 2503.0], [74.8, 2506.0], [74.9, 2506.0], [75.0, 2512.0], [75.1, 2512.0], [75.2, 2512.0], [75.3, 2518.0], [75.4, 2518.0], [75.5, 2524.0], [75.6, 2524.0], [75.7, 2524.0], [75.8, 2536.0], [75.9, 2536.0], [76.0, 2551.0], [76.1, 2551.0], [76.2, 2551.0], [76.3, 2564.0], [76.4, 2564.0], [76.5, 2574.0], [76.6, 2574.0], [76.7, 2574.0], [76.8, 2584.0], [76.9, 2584.0], [77.0, 2591.0], [77.1, 2591.0], [77.2, 2591.0], [77.3, 2592.0], [77.4, 2592.0], [77.5, 2597.0], [77.6, 2597.0], [77.7, 2597.0], [77.8, 2600.0], [77.9, 2600.0], [78.0, 2608.0], [78.1, 2608.0], [78.2, 2608.0], [78.3, 2613.0], [78.4, 2613.0], [78.5, 2620.0], [78.6, 2620.0], [78.7, 2620.0], [78.8, 2634.0], [78.9, 2634.0], [79.0, 2635.0], [79.1, 2635.0], [79.2, 2635.0], [79.3, 2638.0], [79.4, 2638.0], [79.5, 2645.0], [79.6, 2645.0], [79.7, 2645.0], [79.8, 2646.0], [79.9, 2646.0], [80.0, 2647.0], [80.1, 2647.0], [80.2, 2647.0], [80.3, 2652.0], [80.4, 2652.0], [80.5, 2653.0], [80.6, 2653.0], [80.7, 2653.0], [80.8, 2667.0], [80.9, 2667.0], [81.0, 2668.0], [81.1, 2668.0], [81.2, 2668.0], [81.3, 2690.0], [81.4, 2690.0], [81.5, 2692.0], [81.6, 2692.0], [81.7, 2692.0], [81.8, 2696.0], [81.9, 2696.0], [82.0, 2700.0], [82.1, 2700.0], [82.2, 2700.0], [82.3, 2707.0], [82.4, 2707.0], [82.5, 2708.0], [82.6, 2708.0], [82.7, 2708.0], [82.8, 2709.0], [82.9, 2709.0], [83.0, 2712.0], [83.1, 2712.0], [83.2, 2712.0], [83.3, 2712.0], [83.4, 2712.0], [83.5, 2726.0], [83.6, 2726.0], [83.7, 2726.0], [83.8, 2731.0], [83.9, 2731.0], [84.0, 2742.0], [84.1, 2742.0], [84.2, 2742.0], [84.3, 2749.0], [84.4, 2749.0], [84.5, 2752.0], [84.6, 2752.0], [84.7, 2752.0], [84.8, 2762.0], [84.9, 2762.0], [85.0, 2771.0], [85.1, 2771.0], [85.2, 2771.0], [85.3, 2817.0], [85.4, 2817.0], [85.5, 2820.0], [85.6, 2820.0], [85.7, 2820.0], [85.8, 2825.0], [85.9, 2825.0], [86.0, 2835.0], [86.1, 2835.0], [86.2, 2835.0], [86.3, 2841.0], [86.4, 2841.0], [86.5, 2859.0], [86.6, 2859.0], [86.7, 2859.0], [86.8, 2870.0], [86.9, 2870.0], [87.0, 2876.0], [87.1, 2876.0], [87.2, 2876.0], [87.3, 2883.0], [87.4, 2883.0], [87.5, 2884.0], [87.6, 2884.0], [87.7, 2884.0], [87.8, 2886.0], [87.9, 2886.0], [88.0, 2894.0], [88.1, 2894.0], [88.2, 2894.0], [88.3, 2906.0], [88.4, 2906.0], [88.5, 2908.0], [88.6, 2908.0], [88.7, 2908.0], [88.8, 2923.0], [88.9, 2923.0], [89.0, 2944.0], [89.1, 2944.0], [89.2, 2944.0], [89.3, 2973.0], [89.4, 2973.0], [89.5, 2993.0], [89.6, 2993.0], [89.7, 2993.0], [89.8, 3027.0], [89.9, 3027.0], [90.0, 3053.0], [90.1, 3053.0], [90.2, 3053.0], [90.3, 3056.0], [90.4, 3056.0], [90.5, 3102.0], [90.6, 3102.0], [90.7, 3102.0], [90.8, 3124.0], [90.9, 3124.0], [91.0, 3216.0], [91.1, 3216.0], [91.2, 3216.0], [91.3, 3479.0], [91.4, 3479.0], [91.5, 3493.0], [91.6, 3493.0], [91.7, 3493.0], [91.8, 3505.0], [91.9, 3505.0], [92.0, 3525.0], [92.1, 3525.0], [92.2, 3525.0], [92.3, 3527.0], [92.4, 3527.0], [92.5, 3534.0], [92.6, 3534.0], [92.7, 3534.0], [92.8, 3537.0], [92.9, 3537.0], [93.0, 3563.0], [93.1, 3563.0], [93.2, 3563.0], [93.3, 3589.0], [93.4, 3589.0], [93.5, 3626.0], [93.6, 3626.0], [93.7, 3626.0], [93.8, 3645.0], [93.9, 3645.0], [94.0, 3998.0], [94.1, 3998.0], [94.2, 3998.0], [94.3, 4278.0], [94.4, 4278.0], [94.5, 4517.0], [94.6, 4517.0], [94.7, 4517.0], [94.8, 4570.0], [94.9, 4570.0], [95.0, 4593.0], [95.1, 4593.0], [95.2, 4593.0], [95.3, 4777.0], [95.4, 4777.0], [95.5, 4798.0], [95.6, 4798.0], [95.7, 4798.0], [95.8, 4811.0], [95.9, 4811.0], [96.0, 4817.0], [96.1, 4817.0], [96.2, 4817.0], [96.3, 4820.0], [96.4, 4820.0], [96.5, 4824.0], [96.6, 4824.0], [96.7, 4824.0], [96.8, 4829.0], [96.9, 4829.0], [97.0, 4843.0], [97.1, 4843.0], [97.2, 4843.0], [97.3, 4853.0], [97.4, 4853.0], [97.5, 4863.0], [97.6, 4863.0], [97.7, 4863.0], [97.8, 4879.0], [97.9, 4879.0], [98.0, 4895.0], [98.1, 4895.0], [98.2, 4895.0], [98.3, 4897.0], [98.4, 4897.0], [98.5, 4900.0], [98.6, 4900.0], [98.7, 4900.0], [98.8, 4915.0], [98.9, 4915.0], [99.0, 4918.0], [99.1, 4918.0], [99.2, 4918.0], [99.3, 4918.0], [99.4, 4918.0], [99.5, 4926.0], [99.6, 4926.0], [99.7, 4926.0], [99.8, 5485.0], [99.9, 5485.0]], "isOverall": false, "label": "Create Pet", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 86.0, "series": [{"data": [[600.0, 86.0], [700.0, 19.0], [800.0, 31.0], [900.0, 60.0], [1000.0, 22.0], [1100.0, 18.0], [1200.0, 17.0], [1300.0, 13.0], [1400.0, 14.0], [1500.0, 13.0], [1600.0, 7.0], [1700.0, 3.0], [1800.0, 5.0], [1900.0, 7.0], [2000.0, 6.0], [2100.0, 6.0], [2300.0, 4.0], [2200.0, 6.0], [2400.0, 2.0], [2500.0, 3.0], [2600.0, 4.0], [2700.0, 1.0], [2800.0, 4.0], [2900.0, 2.0], [3000.0, 2.0], [3300.0, 2.0], [3400.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 2.0], [4300.0, 2.0], [4400.0, 1.0], [4500.0, 1.0], [4600.0, 1.0], [300.0, 4.0], [4800.0, 3.0], [5100.0, 1.0], [400.0, 11.0], [500.0, 14.0]], "isOverall": false, "label": "Search Pet", "isController": false}, {"data": [[1200.0, 4.0], [1300.0, 37.0], [1400.0, 46.0], [1500.0, 59.0], [1600.0, 49.0], [1700.0, 33.0], [1800.0, 16.0], [1900.0, 4.0], [2000.0, 10.0], [2100.0, 4.0], [2200.0, 5.0], [2300.0, 10.0], [2400.0, 21.0], [2500.0, 13.0], [2600.0, 17.0], [2700.0, 13.0], [2800.0, 12.0], [2900.0, 6.0], [3000.0, 3.0], [3100.0, 2.0], [3200.0, 1.0], [3400.0, 2.0], [3500.0, 7.0], [3600.0, 2.0], [3900.0, 1.0], [4200.0, 1.0], [4500.0, 3.0], [4700.0, 2.0], [4800.0, 11.0], [4900.0, 5.0], [5400.0, 1.0]], "isOverall": false, "label": "Create Pet", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 404.0, "series": [{"data": [[0.0, 12.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 379.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 404.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 245.68624999999977, "minX": 1.72452294E12, "maxY": 245.68624999999977, "series": [{"data": [[1.72452294E12, 245.68624999999977]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72452294E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 313.0, "minX": 1.0, "maxY": 5485.0, "series": [{"data": [[2.0, 1239.0], [3.0, 1224.0], [4.0, 1202.0], [5.0, 1180.0], [6.0, 1169.0], [7.0, 631.0], [8.0, 1170.0], [9.0, 630.0], [10.0, 938.0], [11.0, 938.0], [12.0, 933.0], [13.0, 925.0], [14.0, 935.0], [15.0, 917.0], [16.0, 913.0], [17.0, 908.0], [18.0, 893.0], [19.0, 900.0], [20.0, 5186.0], [21.0, 876.0], [22.0, 878.0], [23.0, 923.0], [24.0, 4852.0], [25.0, 4851.0], [26.0, 4810.0], [27.0, 929.0], [28.0, 4632.0], [29.0, 889.0], [30.0, 3871.0], [31.0, 1182.0], [33.0, 2944.0], [32.0, 3781.0], [35.0, 4557.0], [34.0, 4355.0], [37.0, 622.0], [36.0, 633.0], [39.0, 2811.0], [38.0, 4454.0], [41.0, 2602.0], [43.0, 3383.0], [42.0, 2592.0], [45.0, 911.0], [44.0, 599.0], [47.0, 1158.0], [46.0, 4302.0], [49.0, 635.0], [48.0, 2390.0], [51.0, 2863.0], [50.0, 634.0], [53.0, 2252.0], [52.0, 2511.0], [55.0, 889.0], [54.0, 936.0], [57.0, 1728.0], [56.0, 2453.0], [59.0, 918.0], [58.0, 2209.0], [61.0, 2683.0], [60.0, 3036.0], [62.0, 3086.0], [67.0, 612.0], [66.0, 2316.0], [65.0, 630.0], [71.0, 2198.0], [70.0, 635.0], [69.0, 1786.0], [68.0, 1820.0], [75.0, 1556.5], [73.0, 1846.0], [72.0, 3847.0], [79.0, 637.0], [77.0, 634.0], [76.0, 1930.0], [83.0, 1523.0], [82.0, 2033.0], [81.0, 2072.0], [80.0, 632.0], [87.0, 635.0], [86.0, 912.6666666666666], [91.0, 3454.0], [90.0, 882.0], [89.0, 1948.0], [88.0, 2174.0], [94.0, 611.0], [93.0, 1421.0], [99.0, 1913.0], [98.0, 3327.0], [97.0, 1077.0], [96.0, 2594.5], [103.0, 1134.0], [102.0, 1810.0], [101.0, 929.0], [100.0, 595.0], [107.0, 2062.0], [106.0, 1616.0], [105.0, 881.0], [110.0, 886.0], [109.0, 957.0], [108.0, 941.0], [115.0, 1802.0], [112.0, 1572.0], [119.0, 1028.0], [118.0, 1035.0], [116.0, 919.0], [123.0, 634.0], [122.0, 1496.0], [121.0, 618.0], [120.0, 635.0], [127.0, 925.0], [126.0, 1946.0], [124.0, 1730.0], [135.0, 1192.0], [133.0, 965.0], [132.0, 893.0], [130.0, 1054.5], [128.0, 1121.0], [142.0, 1681.0], [141.0, 925.0], [140.0, 946.0], [139.0, 944.0], [138.0, 1535.0], [137.0, 1461.5], [150.0, 1282.8], [149.0, 1516.6666666666667], [158.0, 620.0], [157.0, 746.0], [156.0, 665.0], [155.0, 775.0], [154.0, 1907.0], [152.0, 1154.0], [167.0, 1285.0], [166.0, 1538.0], [165.0, 614.0], [164.0, 746.0], [163.0, 921.5], [160.0, 2004.0], [175.0, 746.0], [174.0, 1224.0], [173.0, 2155.0], [172.0, 1153.0], [171.0, 1371.0], [169.0, 630.0], [168.0, 1316.0], [183.0, 2061.0], [182.0, 1086.0], [181.0, 660.0], [180.0, 667.0], [179.0, 986.0], [177.0, 1401.0], [176.0, 1266.0], [191.0, 2753.0], [190.0, 1194.5], [188.0, 833.0], [187.0, 1218.0], [186.0, 1137.0], [185.0, 973.0], [184.0, 1169.0], [199.0, 2154.0], [198.0, 971.0], [197.0, 1573.0], [196.0, 1446.0], [194.0, 1237.0], [193.0, 615.0], [192.0, 1060.0], [207.0, 889.0], [206.0, 752.0], [205.0, 667.0], [204.0, 1406.0], [203.0, 936.0], [202.0, 1344.0], [200.0, 849.0], [215.0, 610.0], [214.0, 981.0], [213.0, 2603.0], [212.0, 875.0], [211.0, 645.0], [210.0, 2200.0], [209.0, 928.0], [208.0, 1498.0], [223.0, 808.0], [221.0, 666.0], [220.0, 683.5], [218.0, 660.0], [217.0, 1760.0], [231.0, 1107.0], [230.0, 593.0], [229.0, 1170.0], [228.0, 2474.0], [227.0, 652.0], [226.0, 675.0], [225.0, 2382.0], [224.0, 918.0], [239.0, 2348.0], [238.0, 829.0], [236.0, 2252.0], [235.0, 601.0], [234.0, 2282.0], [233.0, 921.0], [232.0, 604.0], [247.0, 633.0], [246.0, 899.0], [245.0, 1105.0], [244.0, 680.0], [243.0, 593.0], [242.0, 995.5], [240.0, 313.0], [255.0, 787.0], [253.0, 636.0], [252.0, 788.0], [251.0, 915.0], [249.0, 619.0], [248.0, 603.0], [270.0, 686.0], [271.0, 1234.0], [269.0, 664.0], [268.0, 632.0], [267.0, 830.0], [266.0, 652.0], [265.0, 1484.0], [264.0, 885.0], [263.0, 1909.0], [256.0, 640.0], [259.0, 612.0], [258.0, 978.5], [262.0, 1125.5], [260.0, 838.0], [285.0, 982.0], [286.0, 1269.0], [284.0, 1848.0], [275.0, 628.0], [274.0, 635.0], [273.0, 647.0], [283.0, 1097.0], [282.0, 616.5], [280.0, 1857.0], [279.0, 1120.0], [278.0, 1993.0], [277.0, 609.0], [276.0, 1520.0], [291.0, 621.5], [303.0, 598.5], [301.0, 694.5], [299.0, 612.0], [298.0, 705.0], [297.0, 318.0], [295.0, 630.0], [294.0, 622.0], [293.0, 640.5], [289.0, 1057.0], [288.0, 1088.5], [317.0, 650.0], [319.0, 1261.5], [316.0, 871.0], [306.0, 600.0], [305.0, 766.0], [304.0, 597.0], [315.0, 920.0], [314.0, 1629.0], [313.0, 902.0], [312.0, 919.0], [311.0, 1548.0], [310.0, 970.0], [309.0, 990.0], [308.0, 611.0], [334.0, 1144.5], [335.0, 1297.0], [332.0, 892.0], [323.0, 1657.0], [322.0, 1015.0], [321.0, 1441.0], [320.0, 1556.0], [331.0, 1444.0], [330.0, 1322.0], [329.0, 805.0], [328.0, 722.0], [327.0, 1506.0], [326.0, 1064.0], [325.0, 1355.0], [324.0, 991.0], [350.0, 642.0], [351.0, 1101.0], [349.0, 1337.0], [348.0, 1360.0], [346.0, 1366.0], [345.0, 1373.0], [344.0, 647.0], [343.0, 1387.0], [339.0, 1442.0], [338.0, 1216.3333333333333], [342.0, 669.0], [341.0, 1506.0], [340.0, 1512.0], [366.0, 863.0], [367.0, 534.0], [365.0, 1000.0], [364.0, 1177.0], [363.0, 725.0], [362.0, 1032.0], [361.0, 618.0], [360.0, 1095.0], [359.0, 612.0], [354.0, 849.0], [352.0, 1399.0], [358.0, 717.0], [357.0, 725.0], [356.0, 1088.5], [381.0, 673.0], [380.0, 690.0], [371.0, 833.0], [370.0, 813.5], [368.0, 839.0], [379.0, 883.0], [378.0, 901.0], [377.0, 367.0], [376.0, 724.0], [375.0, 784.0], [374.0, 396.0], [373.0, 837.0], [372.0, 985.0], [397.0, 440.0], [396.0, 447.0], [398.0, 466.6666666666667], [395.0, 472.0], [394.0, 480.0], [393.0, 495.0], [392.0, 477.0], [391.0, 456.0], [390.0, 571.5], [388.0, 542.0], [387.0, 433.0], [386.0, 629.0], [385.0, 516.0], [384.0, 660.0], [1.0, 598.0]], "isOverall": false, "label": "Search Pet", "isController": false}, {"data": [[200.72500000000008, 1235.2875000000008]], "isOverall": false, "label": "Search Pet-Aggregated", "isController": false}, {"data": [[15.0, 5485.0], [25.0, 4570.0], [27.0, 4517.0], [41.0, 4919.25], [43.0, 4825.4], [42.0, 4881.166666666666], [44.0, 4797.333333333333], [57.0, 4593.0], [67.0, 3589.0], [68.0, 3562.3333333333335], [80.0, 4278.0], [99.0, 3998.0], [97.0, 3486.0], [124.0, 3537.0], [138.0, 3559.5], [158.0, 2955.5], [167.0, 2781.0], [166.0, 2798.0], [165.0, 2835.0], [164.0, 2883.0], [182.0, 2786.0], [177.0, 2841.0], [196.0, 3216.0], [193.0, 2709.0], [206.0, 2720.5], [205.0, 2770.3333333333335], [204.0, 3077.6666666666665], [203.0, 2836.5], [215.0, 2731.0], [214.0, 2870.0], [223.0, 2668.5], [221.0, 2701.5], [231.0, 2817.5], [228.0, 2440.0], [227.0, 2531.0], [226.0, 2388.5], [238.0, 2497.5], [236.0, 2575.6666666666665], [235.0, 2691.3333333333335], [233.0, 2646.0], [247.0, 2257.0], [244.0, 2562.0], [243.0, 2628.714285714286], [242.0, 2502.0], [240.0, 2745.5], [251.0, 2476.0], [270.0, 2524.0], [267.0, 2534.0], [263.0, 2738.5], [262.0, 2601.0], [260.0, 1965.5], [259.0, 2397.0], [286.0, 1532.0], [285.0, 2036.2857142857144], [282.0, 1770.5], [279.0, 1744.4], [278.0, 1611.0], [275.0, 2288.8], [274.0, 2270.3333333333335], [273.0, 2524.0], [299.0, 1662.0], [298.0, 1666.0], [297.0, 1504.5], [291.0, 1981.75], [289.0, 1527.0], [316.0, 1644.0], [305.0, 1428.375], [319.0, 1574.0], [317.0, 1799.705882352941], [315.0, 2653.0], [314.0, 1878.0], [312.0, 1822.3333333333333], [311.0, 2179.5], [308.0, 1457.5], [321.0, 1428.2083333333333], [331.0, 2472.0], [328.0, 1547.8], [326.0, 2032.0], [324.0, 1632.0], [351.0, 1733.5], [349.0, 1938.1818181818182], [346.0, 2033.75], [364.0, 1726.5714285714284], [352.0, 1435.3750000000002], [360.0, 1607.1818181818182], [363.0, 1785.888888888889], [362.0, 1973.5], [359.0, 1670.5], [357.0, 1786.0], [356.0, 1581.0], [354.0, 1716.5], [380.0, 1646.0], [379.0, 1760.9565217391305], [374.0, 1544.0], [373.0, 1778.25], [372.0, 1862.0], [398.0, 1480.3333333333333], [394.0, 1553.5], [395.0, 1463.0], [393.0, 1472.6666666666667], [390.0, 1570.8], [388.0, 1537.3333333333333], [387.0, 1482.0], [386.0, 1695.0], [385.0, 1585.0], [384.0, 1667.5]], "isOverall": false, "label": "Create Pet", "isController": false}, {"data": [[290.64749999999987, 2107.8949999999986]], "isOverall": false, "label": "Create Pet-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 398.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4016.5833333333335, "minX": 1.72452294E12, "maxY": 177519.93333333332, "series": [{"data": [[1.72452294E12, 177519.93333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72452294E12, 4016.5833333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72452294E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1235.2875000000008, "minX": 1.72452294E12, "maxY": 2107.8949999999986, "series": [{"data": [[1.72452294E12, 1235.2875000000008]], "isOverall": false, "label": "Search Pet", "isController": false}, {"data": [[1.72452294E12, 2107.8949999999986]], "isOverall": false, "label": "Create Pet", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72452294E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1033.9399999999991, "minX": 1.72452294E12, "maxY": 2107.7500000000014, "series": [{"data": [[1.72452294E12, 1033.9399999999991]], "isOverall": false, "label": "Search Pet", "isController": false}, {"data": [[1.72452294E12, 2107.7500000000014]], "isOverall": false, "label": "Create Pet", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72452294E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72452294E12, "maxY": 1692.9175000000005, "series": [{"data": [[1.72452294E12, 0.0]], "isOverall": false, "label": "Search Pet", "isController": false}, {"data": [[1.72452294E12, 1692.9175000000005]], "isOverall": false, "label": "Create Pet", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72452294E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 367.0, "minX": 1.72452294E12, "maxY": 5485.0, "series": [{"data": [[1.72452294E12, 5485.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72452294E12, 367.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72452294E12, 2829.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72452294E12, 4897.12]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72452294E12, 1508.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72452294E12, 3596.3999999999974]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72452294E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 315.5, "minX": 4.0, "maxY": 2353.0, "series": [{"data": [[4.0, 1213.0], [35.0, 938.0], [161.0, 1218.0], [168.0, 1630.0], [88.0, 2353.0], [111.0, 1410.0], [233.0, 1580.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[168.0, 603.0], [111.0, 468.0], [233.0, 315.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 233.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 315.5, "minX": 4.0, "maxY": 1809.0, "series": [{"data": [[4.0, 912.5], [35.0, 920.0], [161.0, 882.0], [168.0, 1630.0], [88.0, 1809.0], [111.0, 1410.0], [233.0, 1565.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[168.0, 603.0], [111.0, 468.0], [233.0, 315.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 233.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.72452294E12, "maxY": 13.333333333333334, "series": [{"data": [[1.72452294E12, 13.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72452294E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.72452294E12, "maxY": 13.25, "series": [{"data": [[1.72452294E12, 13.25]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72452294E12, 0.08333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72452294E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.72452294E12, "maxY": 6.666666666666667, "series": [{"data": [[1.72452294E12, 6.583333333333333]], "isOverall": false, "label": "Search Pet-success", "isController": false}, {"data": [[1.72452294E12, 0.08333333333333333]], "isOverall": false, "label": "Search Pet-failure", "isController": false}, {"data": [[1.72452294E12, 6.666666666666667]], "isOverall": false, "label": "Create Pet-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72452294E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.72452294E12, "maxY": 13.25, "series": [{"data": [[1.72452294E12, 13.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72452294E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72452294E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

